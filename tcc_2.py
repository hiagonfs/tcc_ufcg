# -*- coding: utf-8 -*-
"""tcc-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16cpovDQhkSodtGmQiznK5LImSu51h5kD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
# %pylab inline
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
plt.style.use('ggplot')
from collections import Counter

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['axes.labelcolor'] = 'black'
plt.rcParams['xtick.color'] = 'black'
plt.rcParams['ytick.color'] = 'black'

# Carregando a base de dados:
dataset = pd.read_csv('mencoes-cr.csv')

print(dataset.columns)

date = dataset['created_at'].tolist()

totalDeputados = dataset['username'].value_counts(dropna=True)

totalDeputados

dates_of_tweets = []

for d in date:
  dates_of_tweets.append(d[:10])

dict_date = Counter(dates_of_tweets)
dict_date = dict(dict_date)

len(dict_date)

max_key = max(dict_date, key=dict_date.get)
max_key

dict_date.get('2020-03-23')

contain_values = dataset[dataset['created_at'].str.contains('2020-03-23')]

contain_values_2019 = dataset[dataset['created_at'].str.contains('2019')]
contain_values_2020 = dataset[dataset['created_at'].str.contains('2020')]

print(len(contain_values_2019))
print(len(contain_values_2020))

agrupado_2019 = contain_values_2019["citadas"].value_counts(dropna=True)[:5]
agrupado_2019 = agrupado_2019.rename_axis('citadas').reset_index(name='counts')

agrupado_2020 = contain_values_2020["citadas"].value_counts(dropna=True)[:5]
agrupado_2020 = agrupado_2020.rename_axis('citadas').reset_index(name='counts')

dict_inter_month_2019 = {}

def interMonth(ano, mes):
  pararm = str(ano) + "-" + str(mes)
  contain_values = dataset[dataset['created_at'].str.contains(pararm)]
  dict_inter_month_2019[mes] = len(contain_values)

interMonth("2019", "01")
interMonth("2019", "02")
interMonth("2019", "03")
interMonth("2019", "04")
interMonth("2019", "05")
interMonth("2019", "06")
interMonth("2019", "07")
interMonth("2019", "08")
interMonth("2019", "09")
interMonth("2019", "10")
interMonth("2019", "11")
interMonth("2019", "12")

dict_inter_month_2019

dt_fromdict_2019 = pd.DataFrame.from_dict(dict_inter_month_2019, orient='index').reset_index()

dt_fromdict_2019.columns = ['mes', 'totalInteracoes']

dt_fromdict_2019

dict_inter_month_2020 = {}

def interMonth(ano, mes):
  pararm = str(ano) + "-" + str(mes)
  contain_values = dataset[dataset['created_at'].str.contains(pararm)]
  dict_inter_month_2020[mes] = len(contain_values)

interMonth("2020", "01")
interMonth("2020", "02")
interMonth("2020", "03")
interMonth("2020", "04")
interMonth("2020", "05")
interMonth("2020", "06")

dt_fromdict_2020 = pd.DataFrame.from_dict(dict_inter_month_2020, orient='index').reset_index()

dt_fromdict_2020.columns = ['mes', 'totalInteracoes']

dt_fromdict_2020

meses1 = list(['jan', 'fev', 'mar', 'abr','mai' , 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'])
totalMeses1 = list(dt_fromdict_2019['totalInteracoes'])

fig = plt.figure(figsize = (6, 5)) 

plt.ylabel("Interações") 
plt.xlabel("Mês") 
#plt.title("A MP 927 e os 5 parlamentares que mais citaram")
plt.bar(meses1, totalMeses1, color='black',  edgecolor='black')
 
plt.show()

meses2 = list(['jan', 'fev', 'mar', 'abr','mai' , 'jun'])
totalMeses2 = list(dt_fromdict_2020['totalInteracoes'])

fig = plt.figure(figsize = (6, 5)) 

plt.ylabel("Interações") 
plt.xlabel("Mês") 
#plt.title("A MP 927 e os 5 parlamentares que mais citaram")
plt.bar(meses2, totalMeses2, color='black',  edgecolor='black')
 
plt.show()

agrupado_2019

a2019 = list(agrupado_2019['citadas'])
c2019 = list(agrupado_2019['counts'])

fig = plt.figure(figsize = (4, 3)) 

ax = plt.axes()

ax.set_facecolor("white")

plt.ylabel("Quantidade") 
plt.xlabel("Citação") 
#plt.title("A MP 927 e os 5 parlamentares que mais citaram")
plt.bar(a2019, c2019, color='black',  edgecolor='black')
 
plt.show()

agrupado_2020

a2020 = list(agrupado_2020['citadas'])
c2020 = list(agrupado_2020['counts'])

fig = plt.figure(figsize = (4, 3)) 

ax = plt.axes()

ax.set_facecolor("white")

plt.ylabel("Quantidade") 
plt.xlabel("Citação") 
#plt.title("A MP 927 e os 5 parlamentares que mais citaram")
plt.bar(a2020, c2020, color='black',  edgecolor='black')
 
plt.show()

dataabc = contain_values["citadas"].value_counts(dropna=True)[:10] 

dataabc = dataabc.rename_axis('citadas').reset_index(name='counts')

dataabc.head(10)

def geraGraficoParlamentares(proposta):
  dfx = dataset[dataset['citadas'] == proposta]
  dfx = dfx.groupby(u'citadas')['nome_eleitoral'].value_counts(ascending=False).rename_axis().reset_index(name='counts')#.plot.barh()

  cincoPartidosx = dfx.iloc[:5]

  fig = plt.figure(figsize = (3, 2)) 

  partidosx = list(cincoPartidosx['nome_eleitoral'])
  interacoesx = list(cincoPartidosx['counts'])

  plt.ylabel("Nome") 
  plt.xlabel("Quantidade")
  plt.barh(partidosx, interacoesx, color='black',  edgecolor='black')
 
  plt.show()

geraGraficoParlamentares('MP 927')
geraGraficoParlamentares('PL 1075')
geraGraficoParlamentares('PEC 45')
geraGraficoParlamentares('MP 936')
geraGraficoParlamentares('PL 873')